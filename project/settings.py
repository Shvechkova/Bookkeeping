"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import environ
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Инициализация окружения и чтение .env (сначала из корня, затем из docker/.env, если есть)
# env = environ.Env()
# environ.Env.read_env(os.path.join(BASE_DIR, ".env"))
environ.Env.read_env(os.path.join(BASE_DIR, "docker/.env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", default="django-insecure-placeholder")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False").lower() in ("true", "1", "t")
PROD = os.environ.get("PROD", "False").lower() in ("true", "1", "t")
# DEBUG = env.bool("DEBUG", default=True# DEBUG = False
DJANGO_ALLOWED_HOSTS = "localhost 127.0.0.1 [::1] dyugaev.beget.tech"
ALLOWED_HOSTS = ["127.0.0.1", "localhost", "83.222.24.50","dyugaev.beget.tech"]

INTERNAL_IPS = ["127.0.0.1", "localhost"]

CSRF_TRUSTED_ORIGINS = [
    "http://83.222.24.50",  
]

CSRF_COOKIE_SECURE = False
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "http")

# Application definition

INSTALLED_APPS = [
    "apps.employee.apps.EmployeeConfig",
    "apps.operation.apps.OperationConfig",
    "apps.core.apps.CoreConfig",
    "apps.service.apps.ServiceConfig",
    "apps.client.apps.ClientConfig",
    "apps.bank.apps.BankConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
]
if DEBUG:
    INSTALLED_APPS += [
        "debug_toolbar",
    ]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "apps.core.middleware.LoginRequiredMiddleware",  # <-- мой middleware
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
if DEBUG:
    MIDDLEWARE += [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ]


ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "apps/core/templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": os.environ.get("DB_ENGINE", "django.db.backends.postgresql"),
        "NAME": os.environ.get("DB_NAME"),
        "USER": os.environ.get("DB_USER"),
        "PASSWORD": os.environ.get("DB_PASSWORD"),
        "HOST": os.environ.get("DB_HOST"),
        "PORT": os.environ.get("DB_PORT"),
       
        # 'CONN_MAX_AGE': 60,
    }
}
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.mysql",
#         "NAME": os.environ.get("DB_NAME"),
#         "USER": os.environ.get("DB_USER"),
#         "PASSWORD": os.environ.get("DB_PASSWORD"),
#         "HOST": os.environ.get("DB_HOST", default="127.0.0.1"),
#         "PORT": os.environ.get("DB_PORT", default="3306"),
#         # "CONN_MAX_AGE": 60,
#         # "OPTIONS": {"init_command": "SET sql_mode='STRICT_TRANS_TABLES'"},
#     }
# }


# # Автоматически выбираем базу данных в зависимости от окружения
# if os.environ.get("USE_SQLITE", default="False").lower() == "true":
#     # Используем SQLite для локальной разработки и передачи приложения
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.sqlite3',
#             'NAME': BASE_DIR / 'db.sqlite3',
#         }
#     }
#     print("Using SQLite database for local development")
# else:
#     # Используем postgress для production
#     try:
#         DATABASES = {
#             "default": {
#                 "ENGINE": "django.db.backends.mysql",
#                 "NAME": os.environ.get("DB_NAME"),
#                 "USER": os.environ.get("DB_USER"),
#                 "PASSWORD": os.environ.get("DB_PASSWORD"),
#                 "HOST": os.environ.get("DB_HOST", default="127.0.0.1"),
#                 "PORT": os.environ.get("DB_PORT", default="3306"),
#                 # "CONN_MAX_AGE": 60,
#                 # "OPTIONS": {"init_command": "SET sql_mode='STRICT_TRANS_TABLES'"},
#             }
#         }
#         print("Using MySQL database for production")
#     except Exception as e:
#         print(f"MySQL connection failed: {e}")
#         print("Falling back to SQLite database")
#         DATABASES = {
#             'default': {
#                 'ENGINE': 'django.db.backends.sqlite3',
#                 'NAME': BASE_DIR / 'db.sqlite3',
#             }
#         }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "ru-RU"
TIME_ZONE = "Europe/Samara"
CELERY_TIMEZONE = "Europe/Samara"

USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
if PROD:
    FORCE_SCRIPT_NAME = "/bookkeeping"
    USE_X_FORWARDED_HOST = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "http")  # если без https

    STATIC_URL = "/bookkeeping/static/"
    MEDIA_URL = "/bookkeeping/media/"
    STATIC_ROOT = os.path.join(BASE_DIR, "static/")
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
    
else:
    STATIC_URL = "static/"
    MEDIA_URL = "/media/"
    STATIC_ROOT = os.path.join(BASE_DIR, "static/")
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Принудительно устанавливаем DEBUG=False для exe
# В контейнере и при развёртывании путь к manage.py находится на уровень выше BASE_DIR
manage_py_candidate = os.path.join(BASE_DIR.parent, "manage.py")
if not os.path.exists(manage_py_candidate):
    # Если manage.py не найден рядом с проектом, оставляем DEBUG согласно окружению
    DEBUG = os.environ.get("DEBUG", "False").lower() in ("true", "1", "t")




CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": os.path.join(BASE_DIR, "coolsite_cache"),
    }
}
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

if DEBUG:
    import socket  # only if you haven't already imported this

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + [
        "127.0.0.1",
        "10.0.2.2",
    ]

USE_L10N = True
DECIMAL_SEPARATOR = "."
# USE_THOUSAND_SEPARATOR = True
# THOUSAND_SEPARATOR = " "
# NUMBER_GROUPING = 3

CELERY_BROKER_URL = "redis://redis:6379"
CELERY_RESULT_BACKEND = "redis://redis:6379"

MONTHS_RU = [
    "Январь",
    "Февраль",
    "Март",
    "Апрель",
    "Май",
    "Июнь",
    "Июль",
    "Август",
    "Сентябрь",
    "Октябрь",
    "Ноябрь",
    "Декабрь",
]
